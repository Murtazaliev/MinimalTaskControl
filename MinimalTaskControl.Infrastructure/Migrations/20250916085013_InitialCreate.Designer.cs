// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MinimalTaskControl.Infrastructure.Database;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MinimalTaskControl.Infrastructure.Migrations
{
    [DbContext(typeof(MinimalTaskControlDbContext))]
    [Migration("20250916085013_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("task_control_db")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MinimalTaskControl.Core.Entities.TaskInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Assignee")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("assignee");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("author");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)")
                        .HasColumnName("description");

                    b.Property<Guid?>("ParentTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("parent_task_id");

                    b.Property<string>("Priority")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("priority");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("title");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_tasks");

                    b.HasIndex("Assignee")
                        .HasDatabaseName("ix_tasks_assignee");

                    b.HasIndex("Author")
                        .HasDatabaseName("ix_tasks_author");

                    b.HasIndex("ParentTaskId")
                        .HasDatabaseName("ix_tasks_parent_task_id");

                    b.HasIndex("Priority")
                        .HasDatabaseName("ix_tasks_priority");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_tasks_status");

                    b.ToTable("tasks", "task_control_db");
                });

            modelBuilder.Entity("MinimalTaskControl.Core.Entities.TaskRelation", b =>
                {
                    b.Property<Guid>("TaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("task_id");

                    b.Property<Guid>("RelatedTaskId")
                        .HasColumnType("uuid")
                        .HasColumnName("related_task_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("TaskId", "RelatedTaskId")
                        .HasName("pk_task_relations");

                    b.HasIndex("RelatedTaskId")
                        .HasDatabaseName("ix_task_relations_related_task_id");

                    b.ToTable("task_relations", "task_control_db");
                });

            modelBuilder.Entity("MinimalTaskControl.Core.Entities.TaskInfo", b =>
                {
                    b.HasOne("MinimalTaskControl.Core.Entities.TaskInfo", "ParentTask")
                        .WithMany("SubTasks")
                        .HasForeignKey("ParentTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .HasConstraintName("fk_tasks_tasks_parent_task_id");

                    b.Navigation("ParentTask");
                });

            modelBuilder.Entity("MinimalTaskControl.Core.Entities.TaskRelation", b =>
                {
                    b.HasOne("MinimalTaskControl.Core.Entities.TaskInfo", "RelatedTask")
                        .WithMany()
                        .HasForeignKey("RelatedTaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_task_relations_tasks_related_task_id");

                    b.HasOne("MinimalTaskControl.Core.Entities.TaskInfo", "Task")
                        .WithMany("RelatedTasks")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("fk_task_relations_tasks_task_id");

                    b.Navigation("RelatedTask");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("MinimalTaskControl.Core.Entities.TaskInfo", b =>
                {
                    b.Navigation("RelatedTasks");

                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
